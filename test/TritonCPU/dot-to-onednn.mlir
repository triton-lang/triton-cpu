// RUN: triton-opt %s -split-input-file -triton-cpu-convert-dot-to-onednn -canonicalize | FileCheck %s

// Replacement of a contraction operation with a single tile_mulf operation.

// CHECK-LABEL: @test_single_mulf
// CHECK:       %[[RHS_BUF:.+]] = memref.alloca() {alignment = 64 : i64} : memref<16x32xbf16>
// CHECK:       %[[OUT_MEMREF:.+]] = triton_cpu.extract_memref %2 : <tensor<16x16xf32>> -> memref<16x16xf32, strided<[16, 1]>>
// CHECK-NEXT:  %[[OUT_INDICES:.+]]:2 = triton_cpu.extract_indices %2 : <tensor<16x16xf32>> -> index, index
// CHECK:       %[[ACC:.+]] = amx.tile_zero : vector<16x16xf32>
// CHECK-NEXT:  %[[LHS:.+]] = amx.tile_load %3[%4#0, %4#1]
// CHECK-NEXT:  %[[RHS:.+]] = amx.tile_load %[[RHS_BUF]][%c0{{.*}}, %c0{{.*}}]
// CHECK-NEXT:  %[[RES:.+]] = amx.tile_mulf %[[LHS]], %[[RHS]], %[[ACC]] : vector<16x32xbf16>, vector<16x32xbf16>, vector<16x16xf32>
// CHECK-NEXT:  amx.tile_store %[[OUT_MEMREF]][%[[OUT_INDICES]]#0, %[[OUT_INDICES]]#1], %[[RES]] : memref<16x16xf32, strided<[16, 1]>>, vector<16x16xf32>

// #loc = loc(unknown)
// #map = affine_map<(d0, d1, d2) -> (d0, d2)>
// #map1 = affine_map<(d0, d1, d2) -> (d2, d1)>
// #map2 = affine_map<(d0, d1, d2) -> (d0, d1)>
// module {
//   tt.func public @test_single_mulf(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc(unknown), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc(unknown), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc(unknown)) attributes {noinline = false} {
//     %cst = arith.constant 0.000000e+00 : bf16 loc(#loc)
//     %cst_0 = arith.constant dense<0.000000e+00> : vector<16x16xf32> loc(#loc)
//     %c16_i64 = arith.constant 16 : i64 loc(#loc)
//     %c32_i64 = arith.constant 32 : i64 loc(#loc)
//     %c1_i64 = arith.constant 1 : i64 loc(#loc)
//     %c0_i32 = arith.constant 0 : i32 loc(#loc)
//     %0 = tt.make_tensor_ptr %arg0, [%c16_i64, %c32_i64], [%c32_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<16x32xbf16>> loc(#loc)
//     %1 = tt.make_tensor_ptr %arg1, [%c32_i64, %c16_i64], [%c16_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<32x16xbf16>> loc(#loc)
//     %2 = tt.make_tensor_ptr %arg2, [%c16_i64, %c16_i64], [%c16_i64, %c1_i64], [%c0_i32, %c0_i32] {order = array<i32: 1, 0>} : <tensor<16x16xf32>> loc(#loc)
//     %3 = triton_cpu.extract_memref %0 : <tensor<16x32xbf16>> -> memref<16x32xbf16, strided<[32, 1]>> loc(#loc)
//     %4:2 = triton_cpu.extract_indices %0 : <tensor<16x32xbf16>> -> index, index loc(#loc)
//     %5 = vector.transfer_read %3[%4#0, %4#1], %cst {in_bounds = [true, true]} : memref<16x32xbf16, strided<[32, 1]>>, vector<16x32xbf16> loc(#loc)
//     %6 = triton_cpu.extract_memref %1 : <tensor<32x16xbf16>> -> memref<32x16xbf16, strided<[16, 1]>> loc(#loc)
//     %7:2 = triton_cpu.extract_indices %1 : <tensor<32x16xbf16>> -> index, index loc(#loc)
//     %8 = vector.transfer_read %6[%7#0, %7#1], %cst {in_bounds = [true, true]} : memref<32x16xbf16, strided<[16, 1]>>, vector<32x16xbf16> loc(#loc)
//     %9 = vector.contract {indexing_maps = [#map, #map1, #map2], iterator_types = ["parallel", "parallel", "reduction"], kind = #vector.kind<add>} %5, %8, %cst_0 : vector<16x32xbf16>, vector<32x16xbf16> into vector<16x16xf32> loc(#loc)
//     %10 = triton_cpu.extract_memref %2 : <tensor<16x16xf32>> -> memref<16x16xf32, strided<[16, 1]>> loc(#loc)
//     %11:2 = triton_cpu.extract_indices %2 : <tensor<16x16xf32>> -> index, index loc(#loc)
//     vector.transfer_write %9, %10[%11#0, %11#1] {in_bounds = [true, true]} : vector<16x16xf32>, memref<16x16xf32, strided<[16, 1]>> loc(#loc)
//     tt.return loc(#loc)
//   } loc(#loc)
// } loc(#loc)

// -----// IR Dump Before OneDNNOpsToLLVM (triton-cpu-onednn-ops-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0)
module {
  llvm.func @matmul_blocked_kernel(%arg0: !llvm.ptr {tt.divisibility = 16 : i32} loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg1: !llvm.ptr {tt.divisibility = 16 : i32} loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg2: !llvm.ptr {tt.divisibility = 16 : i32} loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg9: i32 loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg10: i32 loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg11: i32 loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg12: i32 loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg13: i32 loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0), %arg14: i32 loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5695:0)) attributes {noinline = false} {
    %c31 = arith.constant 31 : index loc(#loc1)
    %c30 = arith.constant 30 : index loc(#loc1)
    %c29 = arith.constant 29 : index loc(#loc1)
    %c28 = arith.constant 28 : index loc(#loc1)
    %c27 = arith.constant 27 : index loc(#loc1)
    %c26 = arith.constant 26 : index loc(#loc1)
    %c25 = arith.constant 25 : index loc(#loc1)
    %c24 = arith.constant 24 : index loc(#loc1)
    %c23 = arith.constant 23 : index loc(#loc1)
    %c22 = arith.constant 22 : index loc(#loc1)
    %c21 = arith.constant 21 : index loc(#loc1)
    %c20 = arith.constant 20 : index loc(#loc1)
    %c19 = arith.constant 19 : index loc(#loc1)
    %c18 = arith.constant 18 : index loc(#loc1)
    %c17 = arith.constant 17 : index loc(#loc1)
    %c15 = arith.constant 15 : index loc(#loc1)
    %c14 = arith.constant 14 : index loc(#loc1)
    %c13 = arith.constant 13 : index loc(#loc1)
    %c12 = arith.constant 12 : index loc(#loc1)
    %c11 = arith.constant 11 : index loc(#loc1)
    %c10 = arith.constant 10 : index loc(#loc1)
    %c9 = arith.constant 9 : index loc(#loc1)
    %c8 = arith.constant 8 : index loc(#loc1)
    %c7 = arith.constant 7 : index loc(#loc1)
    %c6 = arith.constant 6 : index loc(#loc1)
    %c5 = arith.constant 5 : index loc(#loc1)
    %c4 = arith.constant 4 : index loc(#loc1)
    %c3 = arith.constant 3 : index loc(#loc1)
    %c2 = arith.constant 2 : index loc(#loc1)
    %c1 = arith.constant 1 : index loc(#loc1)
    %c16 = arith.constant 16 : index loc(#loc1)
    %c0 = arith.constant 0 : index loc(#loc1)
    %c3_i64 = arith.constant 3 : i64 loc(#loc1)
    %c16_i64 = arith.constant 16 : i64 loc(#loc1)
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : vector<32x32xf32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i64 = arith.constant 1 : i64 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = arith.muli %arg9, %c32_i32 : i32 loc(#loc2)
    %1 = arith.muli %arg10, %c32_i32 : i32 loc(#loc3)
    %2 = arith.extsi %arg3 : i32 to i64 loc(#loc4)
    %3 = arith.extsi %arg5 : i32 to i64 loc(#loc4)
    %4 = arith.extsi %arg6 : i32 to i64 loc(#loc4)
    %5 = llvm.mlir.undef : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)> loc(#loc4)
    %6 = llvm.insertvalue %arg0, %5[0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc4)
    %7 = llvm.zext %0 : i32 to i64 loc(#loc4)
    %8 = llvm.insertvalue %7, %6[1, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc4)
    %9 = llvm.zext %c0_i32 : i32 to i64 loc(#loc4)
    %10 = llvm.insertvalue %9, %8[1, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc4)
    %11 = llvm.insertvalue %2, %10[2, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc4)
    %12 = llvm.insertvalue %3, %11[2, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc4)
    %13 = llvm.insertvalue %4, %12[3, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc4)
    %14 = llvm.insertvalue %c1_i64, %13[3, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc4)
    %15 = arith.extsi %arg4 : i32 to i64 loc(#loc5)
    %16 = arith.extsi %arg7 : i32 to i64 loc(#loc5)
    %17 = llvm.mlir.undef : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)> loc(#loc5)
    %18 = llvm.insertvalue %arg1, %17[0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc5)
    %19 = llvm.zext %c0_i32 : i32 to i64 loc(#loc5)
    %20 = llvm.insertvalue %19, %18[1, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc5)
    %21 = llvm.zext %1 : i32 to i64 loc(#loc5)
    %22 = llvm.insertvalue %21, %20[1, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc5)
    %23 = llvm.insertvalue %3, %22[2, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc5)
    %24 = llvm.insertvalue %15, %23[2, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc5)
    %25 = llvm.insertvalue %16, %24[3, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc5)
    %26 = llvm.insertvalue %c1_i64, %25[3, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc5)
    %27 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc(#loc6)
    %28 = llvm.extractvalue %14[0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc6)
    %29 = llvm.insertvalue %28, %27[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc6)
    %30 = llvm.mlir.constant(0 : i64) : i64 loc(#loc6)
    %31 = llvm.insertvalue %30, %29[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc6)
    %32 = llvm.extractvalue %14[2] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc6)
    %33 = llvm.insertvalue %32, %31[3] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc6)
    %34 = llvm.extractvalue %14[3] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc6)
    %35 = llvm.insertvalue %34, %33[4] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc6)
    %36 = builtin.unrealized_conversion_cast %35 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<?x?xf32, strided<[?, 1]>> loc(#loc6)
    %37 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc(#loc7)
    %38 = llvm.extractvalue %26[0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc7)
    %39 = llvm.insertvalue %38, %37[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc7)
    %40 = llvm.mlir.constant(0 : i64) : i64 loc(#loc7)
    %41 = llvm.insertvalue %40, %39[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc7)
    %42 = llvm.extractvalue %26[2] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc7)
    %43 = llvm.insertvalue %42, %41[3] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc7)
    %44 = llvm.extractvalue %26[3] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc7)
    %45 = llvm.insertvalue %44, %43[4] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc7)
    %46 = builtin.unrealized_conversion_cast %45 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<?x?xf32, strided<[?, 1]>> loc(#loc7)
    %base_buffer, %offset, %sizes:2, %strides:2 = memref.extract_strided_metadata %36 : memref<?x?xf32, strided<[?, 1]>> -> memref<f32>, index, index, index, index, index loc(#loc8)
    %base_buffer_1, %offset_2, %sizes_3:2, %strides_4:2 = memref.extract_strided_metadata %46 : memref<?x?xf32, strided<[?, 1]>> -> memref<f32>, index, index, index, index, index loc(#loc8)
    %47 = arith.divui %sizes#1, %c16 : index loc(#loc8)
    %48 = "triton_cpu.brgemm_create"(%c16_i64, %c16_i64, %c16_i64, %47, %c16_i64, %c16_i64, %sizes_3#1, %c3_i64, %c3_i64, %c3_i64) : (i64, i64, i64, index, i64, i64, index, i64, i64, i64) -> i64 loc(#loc8)
    %49 = "triton_cpu.transform_create"(%sizes#1, %c16_i64, %c16_i64, %c16_i64, %c3_i64, %c3_i64, %c16_i64, %47) : (index, i64, i64, i64, i64, i64, i64, index) -> i64 loc(#loc8)
    %alloc = memref.alloc(%47) : memref<16x16x?xf32> loc(#loc8)
    "triton_cpu.transform_call"(%49, %46, %alloc) : (i64, memref<?x?xf32, strided<[?, 1]>>, memref<16x16x?xf32>) -> () loc(#loc8)
    %alloc_5 = memref.alloc() {alignment = 64 : i64} : memref<32x32xf32> loc(#loc8)
    %50 = vector.extract %cst_0[0] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %50, %alloc_5[%c0, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %51 = vector.extract %cst_0[1] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %51, %alloc_5[%c1, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %52 = vector.extract %cst_0[2] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %52, %alloc_5[%c2, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %53 = vector.extract %cst_0[3] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %53, %alloc_5[%c3, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %54 = vector.extract %cst_0[4] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %54, %alloc_5[%c4, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %55 = vector.extract %cst_0[5] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %55, %alloc_5[%c5, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %56 = vector.extract %cst_0[6] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %56, %alloc_5[%c6, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %57 = vector.extract %cst_0[7] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %57, %alloc_5[%c7, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %58 = vector.extract %cst_0[8] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %58, %alloc_5[%c8, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %59 = vector.extract %cst_0[9] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %59, %alloc_5[%c9, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %60 = vector.extract %cst_0[10] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %60, %alloc_5[%c10, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %61 = vector.extract %cst_0[11] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %61, %alloc_5[%c11, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %62 = vector.extract %cst_0[12] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %62, %alloc_5[%c12, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %63 = vector.extract %cst_0[13] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %63, %alloc_5[%c13, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %64 = vector.extract %cst_0[14] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %64, %alloc_5[%c14, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %65 = vector.extract %cst_0[15] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %65, %alloc_5[%c15, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %66 = vector.extract %cst_0[16] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %66, %alloc_5[%c16, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %67 = vector.extract %cst_0[17] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %67, %alloc_5[%c17, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %68 = vector.extract %cst_0[18] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %68, %alloc_5[%c18, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %69 = vector.extract %cst_0[19] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %69, %alloc_5[%c19, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %70 = vector.extract %cst_0[20] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %70, %alloc_5[%c20, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %71 = vector.extract %cst_0[21] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %71, %alloc_5[%c21, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %72 = vector.extract %cst_0[22] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %72, %alloc_5[%c22, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %73 = vector.extract %cst_0[23] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %73, %alloc_5[%c23, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %74 = vector.extract %cst_0[24] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %74, %alloc_5[%c24, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %75 = vector.extract %cst_0[25] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %75, %alloc_5[%c25, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %76 = vector.extract %cst_0[26] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %76, %alloc_5[%c26, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %77 = vector.extract %cst_0[27] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %77, %alloc_5[%c27, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %78 = vector.extract %cst_0[28] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %78, %alloc_5[%c28, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %79 = vector.extract %cst_0[29] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %79, %alloc_5[%c29, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %80 = vector.extract %cst_0[30] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %80, %alloc_5[%c30, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    %81 = vector.extract %cst_0[31] : vector<32xf32> from vector<32x32xf32> loc(#loc8)
    vector.transfer_write %81, %alloc_5[%c31, %c0] {in_bounds = [true]} : vector<32xf32>, memref<32x32xf32> loc(#loc8)
    "triton_cpu.brgemm_call"(%48, %36, %alloc, %alloc_5, %alloc_5) : (i64, memref<?x?xf32, strided<[?, 1]>>, memref<16x16x?xf32>, memref<32x32xf32>, memref<32x32xf32>) -> () loc(#loc8)
    %82 = vector.transfer_read %alloc_5[%c0, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %83 = vector.transfer_read %alloc_5[%c1, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %84 = vector.transfer_read %alloc_5[%c2, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %85 = vector.transfer_read %alloc_5[%c3, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %86 = vector.transfer_read %alloc_5[%c4, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %87 = vector.transfer_read %alloc_5[%c5, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %88 = vector.transfer_read %alloc_5[%c6, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %89 = vector.transfer_read %alloc_5[%c7, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %90 = vector.transfer_read %alloc_5[%c8, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %91 = vector.transfer_read %alloc_5[%c9, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %92 = vector.transfer_read %alloc_5[%c10, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %93 = vector.transfer_read %alloc_5[%c11, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %94 = vector.transfer_read %alloc_5[%c12, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %95 = vector.transfer_read %alloc_5[%c13, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %96 = vector.transfer_read %alloc_5[%c14, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %97 = vector.transfer_read %alloc_5[%c15, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %98 = vector.transfer_read %alloc_5[%c16, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %99 = vector.transfer_read %alloc_5[%c17, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %100 = vector.transfer_read %alloc_5[%c18, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %101 = vector.transfer_read %alloc_5[%c19, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %102 = vector.transfer_read %alloc_5[%c20, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %103 = vector.transfer_read %alloc_5[%c21, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %104 = vector.transfer_read %alloc_5[%c22, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %105 = vector.transfer_read %alloc_5[%c23, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %106 = vector.transfer_read %alloc_5[%c24, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %107 = vector.transfer_read %alloc_5[%c25, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %108 = vector.transfer_read %alloc_5[%c26, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %109 = vector.transfer_read %alloc_5[%c27, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %110 = vector.transfer_read %alloc_5[%c28, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %111 = vector.transfer_read %alloc_5[%c29, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %112 = vector.transfer_read %alloc_5[%c30, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %113 = vector.transfer_read %alloc_5[%c31, %c0], %cst {in_bounds = [true]} : memref<32x32xf32>, vector<32xf32> loc(#loc8)
    %114 = arith.extsi %arg8 : i32 to i64 loc(#loc9)
    %115 = llvm.mlir.undef : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)> loc(#loc9)
    %116 = llvm.insertvalue %arg2, %115[0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc9)
    %117 = llvm.zext %0 : i32 to i64 loc(#loc9)
    %118 = llvm.insertvalue %117, %116[1, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc9)
    %119 = llvm.zext %1 : i32 to i64 loc(#loc9)
    %120 = llvm.insertvalue %119, %118[1, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc9)
    %121 = llvm.insertvalue %2, %120[2, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc9)
    %122 = llvm.insertvalue %15, %121[2, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc9)
    %123 = llvm.insertvalue %114, %122[3, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc9)
    %124 = llvm.insertvalue %c1_i64, %123[3, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc9)
    %125 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> loc(#loc10)
    %126 = llvm.extractvalue %124[0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc10)
    %127 = llvm.insertvalue %126, %125[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc10)
    %128 = llvm.mlir.constant(0 : i64) : i64 loc(#loc10)
    %129 = llvm.insertvalue %128, %127[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc10)
    %130 = llvm.extractvalue %124[2] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc10)
    %131 = llvm.insertvalue %130, %129[3] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc10)
    %132 = llvm.extractvalue %124[3] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc10)
    %133 = llvm.insertvalue %132, %131[4] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>  loc(#loc10)
    %134 = builtin.unrealized_conversion_cast %133 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> to memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %135 = llvm.extractvalue %124[1, 0] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc10)
    %136 = builtin.unrealized_conversion_cast %135 : i64 to index loc(#loc10)
    %137 = llvm.extractvalue %124[1, 1] : !llvm.struct<(ptr, array<2 x i64>, array<2 x i64>, array<2 x i64>)>  loc(#loc10)
    %138 = builtin.unrealized_conversion_cast %137 : i64 to index loc(#loc10)
    %dim = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %139 = arith.cmpi sgt, %dim, %136 : index loc(#loc10)
    llvm.cond_br %139, ^bb1, ^bb2 loc(#loc10)
  ^bb1:  // pred: ^bb0
    vector.transfer_write %82, %134[%136, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb3 loc(#loc10)
  ^bb2:  // pred: ^bb0
    llvm.br ^bb3 loc(#loc10)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    %dim_6 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c1_7 = arith.constant 1 : index loc(#loc10)
    %140 = arith.addi %136, %c1_7 : index loc(#loc10)
    %141 = arith.cmpi sgt, %dim_6, %140 : index loc(#loc10)
    llvm.cond_br %141, ^bb4, ^bb5 loc(#loc10)
  ^bb4:  // pred: ^bb3
    %c1_8 = arith.constant 1 : index loc(#loc10)
    %142 = arith.addi %136, %c1_8 : index loc(#loc10)
    vector.transfer_write %83, %134[%142, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb6 loc(#loc10)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6 loc(#loc10)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %dim_9 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c2_10 = arith.constant 2 : index loc(#loc10)
    %143 = arith.addi %136, %c2_10 : index loc(#loc10)
    %144 = arith.cmpi sgt, %dim_9, %143 : index loc(#loc10)
    llvm.cond_br %144, ^bb7, ^bb8 loc(#loc10)
  ^bb7:  // pred: ^bb6
    %c2_11 = arith.constant 2 : index loc(#loc10)
    %145 = arith.addi %136, %c2_11 : index loc(#loc10)
    vector.transfer_write %84, %134[%145, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb9 loc(#loc10)
  ^bb8:  // pred: ^bb6
    llvm.br ^bb9 loc(#loc10)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %dim_12 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c3_13 = arith.constant 3 : index loc(#loc10)
    %146 = arith.addi %136, %c3_13 : index loc(#loc10)
    %147 = arith.cmpi sgt, %dim_12, %146 : index loc(#loc10)
    llvm.cond_br %147, ^bb10, ^bb11 loc(#loc10)
  ^bb10:  // pred: ^bb9
    %c3_14 = arith.constant 3 : index loc(#loc10)
    %148 = arith.addi %136, %c3_14 : index loc(#loc10)
    vector.transfer_write %85, %134[%148, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb12 loc(#loc10)
  ^bb11:  // pred: ^bb9
    llvm.br ^bb12 loc(#loc10)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %dim_15 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c4_16 = arith.constant 4 : index loc(#loc10)
    %149 = arith.addi %136, %c4_16 : index loc(#loc10)
    %150 = arith.cmpi sgt, %dim_15, %149 : index loc(#loc10)
    llvm.cond_br %150, ^bb13, ^bb14 loc(#loc10)
  ^bb13:  // pred: ^bb12
    %c4_17 = arith.constant 4 : index loc(#loc10)
    %151 = arith.addi %136, %c4_17 : index loc(#loc10)
    vector.transfer_write %86, %134[%151, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb15 loc(#loc10)
  ^bb14:  // pred: ^bb12
    llvm.br ^bb15 loc(#loc10)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %dim_18 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c5_19 = arith.constant 5 : index loc(#loc10)
    %152 = arith.addi %136, %c5_19 : index loc(#loc10)
    %153 = arith.cmpi sgt, %dim_18, %152 : index loc(#loc10)
    llvm.cond_br %153, ^bb16, ^bb17 loc(#loc10)
  ^bb16:  // pred: ^bb15
    %c5_20 = arith.constant 5 : index loc(#loc10)
    %154 = arith.addi %136, %c5_20 : index loc(#loc10)
    vector.transfer_write %87, %134[%154, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb18 loc(#loc10)
  ^bb17:  // pred: ^bb15
    llvm.br ^bb18 loc(#loc10)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    %dim_21 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c6_22 = arith.constant 6 : index loc(#loc10)
    %155 = arith.addi %136, %c6_22 : index loc(#loc10)
    %156 = arith.cmpi sgt, %dim_21, %155 : index loc(#loc10)
    llvm.cond_br %156, ^bb19, ^bb20 loc(#loc10)
  ^bb19:  // pred: ^bb18
    %c6_23 = arith.constant 6 : index loc(#loc10)
    %157 = arith.addi %136, %c6_23 : index loc(#loc10)
    vector.transfer_write %88, %134[%157, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb21 loc(#loc10)
  ^bb20:  // pred: ^bb18
    llvm.br ^bb21 loc(#loc10)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    %dim_24 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c7_25 = arith.constant 7 : index loc(#loc10)
    %158 = arith.addi %136, %c7_25 : index loc(#loc10)
    %159 = arith.cmpi sgt, %dim_24, %158 : index loc(#loc10)
    llvm.cond_br %159, ^bb22, ^bb23 loc(#loc10)
  ^bb22:  // pred: ^bb21
    %c7_26 = arith.constant 7 : index loc(#loc10)
    %160 = arith.addi %136, %c7_26 : index loc(#loc10)
    vector.transfer_write %89, %134[%160, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb24 loc(#loc10)
  ^bb23:  // pred: ^bb21
    llvm.br ^bb24 loc(#loc10)
  ^bb24:  // 2 preds: ^bb22, ^bb23
    %dim_27 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c8_28 = arith.constant 8 : index loc(#loc10)
    %161 = arith.addi %136, %c8_28 : index loc(#loc10)
    %162 = arith.cmpi sgt, %dim_27, %161 : index loc(#loc10)
    llvm.cond_br %162, ^bb25, ^bb26 loc(#loc10)
  ^bb25:  // pred: ^bb24
    %c8_29 = arith.constant 8 : index loc(#loc10)
    %163 = arith.addi %136, %c8_29 : index loc(#loc10)
    vector.transfer_write %90, %134[%163, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb27 loc(#loc10)
  ^bb26:  // pred: ^bb24
    llvm.br ^bb27 loc(#loc10)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    %dim_30 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c9_31 = arith.constant 9 : index loc(#loc10)
    %164 = arith.addi %136, %c9_31 : index loc(#loc10)
    %165 = arith.cmpi sgt, %dim_30, %164 : index loc(#loc10)
    llvm.cond_br %165, ^bb28, ^bb29 loc(#loc10)
  ^bb28:  // pred: ^bb27
    %c9_32 = arith.constant 9 : index loc(#loc10)
    %166 = arith.addi %136, %c9_32 : index loc(#loc10)
    vector.transfer_write %91, %134[%166, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb30 loc(#loc10)
  ^bb29:  // pred: ^bb27
    llvm.br ^bb30 loc(#loc10)
  ^bb30:  // 2 preds: ^bb28, ^bb29
    %dim_33 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c10_34 = arith.constant 10 : index loc(#loc10)
    %167 = arith.addi %136, %c10_34 : index loc(#loc10)
    %168 = arith.cmpi sgt, %dim_33, %167 : index loc(#loc10)
    llvm.cond_br %168, ^bb31, ^bb32 loc(#loc10)
  ^bb31:  // pred: ^bb30
    %c10_35 = arith.constant 10 : index loc(#loc10)
    %169 = arith.addi %136, %c10_35 : index loc(#loc10)
    vector.transfer_write %92, %134[%169, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb33 loc(#loc10)
  ^bb32:  // pred: ^bb30
    llvm.br ^bb33 loc(#loc10)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    %dim_36 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c11_37 = arith.constant 11 : index loc(#loc10)
    %170 = arith.addi %136, %c11_37 : index loc(#loc10)
    %171 = arith.cmpi sgt, %dim_36, %170 : index loc(#loc10)
    llvm.cond_br %171, ^bb34, ^bb35 loc(#loc10)
  ^bb34:  // pred: ^bb33
    %c11_38 = arith.constant 11 : index loc(#loc10)
    %172 = arith.addi %136, %c11_38 : index loc(#loc10)
    vector.transfer_write %93, %134[%172, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb36 loc(#loc10)
  ^bb35:  // pred: ^bb33
    llvm.br ^bb36 loc(#loc10)
  ^bb36:  // 2 preds: ^bb34, ^bb35
    %dim_39 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c12_40 = arith.constant 12 : index loc(#loc10)
    %173 = arith.addi %136, %c12_40 : index loc(#loc10)
    %174 = arith.cmpi sgt, %dim_39, %173 : index loc(#loc10)
    llvm.cond_br %174, ^bb37, ^bb38 loc(#loc10)
  ^bb37:  // pred: ^bb36
    %c12_41 = arith.constant 12 : index loc(#loc10)
    %175 = arith.addi %136, %c12_41 : index loc(#loc10)
    vector.transfer_write %94, %134[%175, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb39 loc(#loc10)
  ^bb38:  // pred: ^bb36
    llvm.br ^bb39 loc(#loc10)
  ^bb39:  // 2 preds: ^bb37, ^bb38
    %dim_42 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c13_43 = arith.constant 13 : index loc(#loc10)
    %176 = arith.addi %136, %c13_43 : index loc(#loc10)
    %177 = arith.cmpi sgt, %dim_42, %176 : index loc(#loc10)
    llvm.cond_br %177, ^bb40, ^bb41 loc(#loc10)
  ^bb40:  // pred: ^bb39
    %c13_44 = arith.constant 13 : index loc(#loc10)
    %178 = arith.addi %136, %c13_44 : index loc(#loc10)
    vector.transfer_write %95, %134[%178, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb42 loc(#loc10)
  ^bb41:  // pred: ^bb39
    llvm.br ^bb42 loc(#loc10)
  ^bb42:  // 2 preds: ^bb40, ^bb41
    %dim_45 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c14_46 = arith.constant 14 : index loc(#loc10)
    %179 = arith.addi %136, %c14_46 : index loc(#loc10)
    %180 = arith.cmpi sgt, %dim_45, %179 : index loc(#loc10)
    llvm.cond_br %180, ^bb43, ^bb44 loc(#loc10)
  ^bb43:  // pred: ^bb42
    %c14_47 = arith.constant 14 : index loc(#loc10)
    %181 = arith.addi %136, %c14_47 : index loc(#loc10)
    vector.transfer_write %96, %134[%181, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb45 loc(#loc10)
  ^bb44:  // pred: ^bb42
    llvm.br ^bb45 loc(#loc10)
  ^bb45:  // 2 preds: ^bb43, ^bb44
    %dim_48 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c15_49 = arith.constant 15 : index loc(#loc10)
    %182 = arith.addi %136, %c15_49 : index loc(#loc10)
    %183 = arith.cmpi sgt, %dim_48, %182 : index loc(#loc10)
    llvm.cond_br %183, ^bb46, ^bb47 loc(#loc10)
  ^bb46:  // pred: ^bb45
    %c15_50 = arith.constant 15 : index loc(#loc10)
    %184 = arith.addi %136, %c15_50 : index loc(#loc10)
    vector.transfer_write %97, %134[%184, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb48 loc(#loc10)
  ^bb47:  // pred: ^bb45
    llvm.br ^bb48 loc(#loc10)
  ^bb48:  // 2 preds: ^bb46, ^bb47
    %dim_51 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c16_52 = arith.constant 16 : index loc(#loc10)
    %185 = arith.addi %136, %c16_52 : index loc(#loc10)
    %186 = arith.cmpi sgt, %dim_51, %185 : index loc(#loc10)
    llvm.cond_br %186, ^bb49, ^bb50 loc(#loc10)
  ^bb49:  // pred: ^bb48
    %c16_53 = arith.constant 16 : index loc(#loc10)
    %187 = arith.addi %136, %c16_53 : index loc(#loc10)
    vector.transfer_write %98, %134[%187, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb51 loc(#loc10)
  ^bb50:  // pred: ^bb48
    llvm.br ^bb51 loc(#loc10)
  ^bb51:  // 2 preds: ^bb49, ^bb50
    %dim_54 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c17_55 = arith.constant 17 : index loc(#loc10)
    %188 = arith.addi %136, %c17_55 : index loc(#loc10)
    %189 = arith.cmpi sgt, %dim_54, %188 : index loc(#loc10)
    llvm.cond_br %189, ^bb52, ^bb53 loc(#loc10)
  ^bb52:  // pred: ^bb51
    %c17_56 = arith.constant 17 : index loc(#loc10)
    %190 = arith.addi %136, %c17_56 : index loc(#loc10)
    vector.transfer_write %99, %134[%190, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb54 loc(#loc10)
  ^bb53:  // pred: ^bb51
    llvm.br ^bb54 loc(#loc10)
  ^bb54:  // 2 preds: ^bb52, ^bb53
    %dim_57 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c18_58 = arith.constant 18 : index loc(#loc10)
    %191 = arith.addi %136, %c18_58 : index loc(#loc10)
    %192 = arith.cmpi sgt, %dim_57, %191 : index loc(#loc10)
    llvm.cond_br %192, ^bb55, ^bb56 loc(#loc10)
  ^bb55:  // pred: ^bb54
    %c18_59 = arith.constant 18 : index loc(#loc10)
    %193 = arith.addi %136, %c18_59 : index loc(#loc10)
    vector.transfer_write %100, %134[%193, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb57 loc(#loc10)
  ^bb56:  // pred: ^bb54
    llvm.br ^bb57 loc(#loc10)
  ^bb57:  // 2 preds: ^bb55, ^bb56
    %dim_60 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c19_61 = arith.constant 19 : index loc(#loc10)
    %194 = arith.addi %136, %c19_61 : index loc(#loc10)
    %195 = arith.cmpi sgt, %dim_60, %194 : index loc(#loc10)
    llvm.cond_br %195, ^bb58, ^bb59 loc(#loc10)
  ^bb58:  // pred: ^bb57
    %c19_62 = arith.constant 19 : index loc(#loc10)
    %196 = arith.addi %136, %c19_62 : index loc(#loc10)
    vector.transfer_write %101, %134[%196, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb60 loc(#loc10)
  ^bb59:  // pred: ^bb57
    llvm.br ^bb60 loc(#loc10)
  ^bb60:  // 2 preds: ^bb58, ^bb59
    %dim_63 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c20_64 = arith.constant 20 : index loc(#loc10)
    %197 = arith.addi %136, %c20_64 : index loc(#loc10)
    %198 = arith.cmpi sgt, %dim_63, %197 : index loc(#loc10)
    llvm.cond_br %198, ^bb61, ^bb62 loc(#loc10)
  ^bb61:  // pred: ^bb60
    %c20_65 = arith.constant 20 : index loc(#loc10)
    %199 = arith.addi %136, %c20_65 : index loc(#loc10)
    vector.transfer_write %102, %134[%199, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb63 loc(#loc10)
  ^bb62:  // pred: ^bb60
    llvm.br ^bb63 loc(#loc10)
  ^bb63:  // 2 preds: ^bb61, ^bb62
    %dim_66 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c21_67 = arith.constant 21 : index loc(#loc10)
    %200 = arith.addi %136, %c21_67 : index loc(#loc10)
    %201 = arith.cmpi sgt, %dim_66, %200 : index loc(#loc10)
    llvm.cond_br %201, ^bb64, ^bb65 loc(#loc10)
  ^bb64:  // pred: ^bb63
    %c21_68 = arith.constant 21 : index loc(#loc10)
    %202 = arith.addi %136, %c21_68 : index loc(#loc10)
    vector.transfer_write %103, %134[%202, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb66 loc(#loc10)
  ^bb65:  // pred: ^bb63
    llvm.br ^bb66 loc(#loc10)
  ^bb66:  // 2 preds: ^bb64, ^bb65
    %dim_69 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c22_70 = arith.constant 22 : index loc(#loc10)
    %203 = arith.addi %136, %c22_70 : index loc(#loc10)
    %204 = arith.cmpi sgt, %dim_69, %203 : index loc(#loc10)
    llvm.cond_br %204, ^bb67, ^bb68 loc(#loc10)
  ^bb67:  // pred: ^bb66
    %c22_71 = arith.constant 22 : index loc(#loc10)
    %205 = arith.addi %136, %c22_71 : index loc(#loc10)
    vector.transfer_write %104, %134[%205, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb69 loc(#loc10)
  ^bb68:  // pred: ^bb66
    llvm.br ^bb69 loc(#loc10)
  ^bb69:  // 2 preds: ^bb67, ^bb68
    %dim_72 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c23_73 = arith.constant 23 : index loc(#loc10)
    %206 = arith.addi %136, %c23_73 : index loc(#loc10)
    %207 = arith.cmpi sgt, %dim_72, %206 : index loc(#loc10)
    llvm.cond_br %207, ^bb70, ^bb71 loc(#loc10)
  ^bb70:  // pred: ^bb69
    %c23_74 = arith.constant 23 : index loc(#loc10)
    %208 = arith.addi %136, %c23_74 : index loc(#loc10)
    vector.transfer_write %105, %134[%208, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb72 loc(#loc10)
  ^bb71:  // pred: ^bb69
    llvm.br ^bb72 loc(#loc10)
  ^bb72:  // 2 preds: ^bb70, ^bb71
    %dim_75 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c24_76 = arith.constant 24 : index loc(#loc10)
    %209 = arith.addi %136, %c24_76 : index loc(#loc10)
    %210 = arith.cmpi sgt, %dim_75, %209 : index loc(#loc10)
    llvm.cond_br %210, ^bb73, ^bb74 loc(#loc10)
  ^bb73:  // pred: ^bb72
    %c24_77 = arith.constant 24 : index loc(#loc10)
    %211 = arith.addi %136, %c24_77 : index loc(#loc10)
    vector.transfer_write %106, %134[%211, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb75 loc(#loc10)
  ^bb74:  // pred: ^bb72
    llvm.br ^bb75 loc(#loc10)
  ^bb75:  // 2 preds: ^bb73, ^bb74
    %dim_78 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c25_79 = arith.constant 25 : index loc(#loc10)
    %212 = arith.addi %136, %c25_79 : index loc(#loc10)
    %213 = arith.cmpi sgt, %dim_78, %212 : index loc(#loc10)
    llvm.cond_br %213, ^bb76, ^bb77 loc(#loc10)
  ^bb76:  // pred: ^bb75
    %c25_80 = arith.constant 25 : index loc(#loc10)
    %214 = arith.addi %136, %c25_80 : index loc(#loc10)
    vector.transfer_write %107, %134[%214, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb78 loc(#loc10)
  ^bb77:  // pred: ^bb75
    llvm.br ^bb78 loc(#loc10)
  ^bb78:  // 2 preds: ^bb76, ^bb77
    %dim_81 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c26_82 = arith.constant 26 : index loc(#loc10)
    %215 = arith.addi %136, %c26_82 : index loc(#loc10)
    %216 = arith.cmpi sgt, %dim_81, %215 : index loc(#loc10)
    llvm.cond_br %216, ^bb79, ^bb80 loc(#loc10)
  ^bb79:  // pred: ^bb78
    %c26_83 = arith.constant 26 : index loc(#loc10)
    %217 = arith.addi %136, %c26_83 : index loc(#loc10)
    vector.transfer_write %108, %134[%217, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb81 loc(#loc10)
  ^bb80:  // pred: ^bb78
    llvm.br ^bb81 loc(#loc10)
  ^bb81:  // 2 preds: ^bb79, ^bb80
    %dim_84 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c27_85 = arith.constant 27 : index loc(#loc10)
    %218 = arith.addi %136, %c27_85 : index loc(#loc10)
    %219 = arith.cmpi sgt, %dim_84, %218 : index loc(#loc10)
    llvm.cond_br %219, ^bb82, ^bb83 loc(#loc10)
  ^bb82:  // pred: ^bb81
    %c27_86 = arith.constant 27 : index loc(#loc10)
    %220 = arith.addi %136, %c27_86 : index loc(#loc10)
    vector.transfer_write %109, %134[%220, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb84 loc(#loc10)
  ^bb83:  // pred: ^bb81
    llvm.br ^bb84 loc(#loc10)
  ^bb84:  // 2 preds: ^bb82, ^bb83
    %dim_87 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c28_88 = arith.constant 28 : index loc(#loc10)
    %221 = arith.addi %136, %c28_88 : index loc(#loc10)
    %222 = arith.cmpi sgt, %dim_87, %221 : index loc(#loc10)
    llvm.cond_br %222, ^bb85, ^bb86 loc(#loc10)
  ^bb85:  // pred: ^bb84
    %c28_89 = arith.constant 28 : index loc(#loc10)
    %223 = arith.addi %136, %c28_89 : index loc(#loc10)
    vector.transfer_write %110, %134[%223, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb87 loc(#loc10)
  ^bb86:  // pred: ^bb84
    llvm.br ^bb87 loc(#loc10)
  ^bb87:  // 2 preds: ^bb85, ^bb86
    %dim_90 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c29_91 = arith.constant 29 : index loc(#loc10)
    %224 = arith.addi %136, %c29_91 : index loc(#loc10)
    %225 = arith.cmpi sgt, %dim_90, %224 : index loc(#loc10)
    llvm.cond_br %225, ^bb88, ^bb89 loc(#loc10)
  ^bb88:  // pred: ^bb87
    %c29_92 = arith.constant 29 : index loc(#loc10)
    %226 = arith.addi %136, %c29_92 : index loc(#loc10)
    vector.transfer_write %111, %134[%226, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb90 loc(#loc10)
  ^bb89:  // pred: ^bb87
    llvm.br ^bb90 loc(#loc10)
  ^bb90:  // 2 preds: ^bb88, ^bb89
    %dim_93 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c30_94 = arith.constant 30 : index loc(#loc10)
    %227 = arith.addi %136, %c30_94 : index loc(#loc10)
    %228 = arith.cmpi sgt, %dim_93, %227 : index loc(#loc10)
    llvm.cond_br %228, ^bb91, ^bb92 loc(#loc10)
  ^bb91:  // pred: ^bb90
    %c30_95 = arith.constant 30 : index loc(#loc10)
    %229 = arith.addi %136, %c30_95 : index loc(#loc10)
    vector.transfer_write %112, %134[%229, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb93 loc(#loc10)
  ^bb92:  // pred: ^bb90
    llvm.br ^bb93 loc(#loc10)
  ^bb93:  // 2 preds: ^bb91, ^bb92
    %dim_96 = memref.dim %134, %c0 : memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    %c31_97 = arith.constant 31 : index loc(#loc10)
    %230 = arith.addi %136, %c31_97 : index loc(#loc10)
    %231 = arith.cmpi sgt, %dim_96, %230 : index loc(#loc10)
    llvm.cond_br %231, ^bb94, ^bb95 loc(#loc10)
  ^bb94:  // pred: ^bb93
    %c31_98 = arith.constant 31 : index loc(#loc10)
    %232 = arith.addi %136, %c31_98 : index loc(#loc10)
    vector.transfer_write %113, %134[%232, %138] : vector<32xf32>, memref<?x?xf32, strided<[?, 1]>> loc(#loc10)
    llvm.br ^bb96 loc(#loc10)
  ^bb95:  // pred: ^bb93
    llvm.br ^bb96 loc(#loc10)
  ^bb96:  // 2 preds: ^bb94, ^bb95
    llvm.return loc(#loc11)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5716:29)
#loc3 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5717:29)
#loc4 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5721:39)
#loc5 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5724:36)
#loc6 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5727:16)
#loc7 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5728:16)
#loc8 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5729:28)
#loc9 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5742:78)
#loc10 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5743:26)
#loc11 = loc("/home/jovyan/triton-cpu/python/test/unit/language/test_core.py":5743:4)
